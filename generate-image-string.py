# Generate PBM image from text
# Eduardo Sarruf (sarruf at pm dot me)
# v0.1

letters = { 'a': "00000000000110000011110001100110011001100111111001100110011001100110011000000000",
            'b': "00000000011111000111111001100110011111100110011001100110011111100111110000000000",
            'c': "00000000001111100111111001110000011000000110000001110000011111100011111000000000",
            'd': "00000000011111000111111001100110011001100110011001100110011111100111110000000000",
            'e': "00000000011111100111111001100000011111100111111001100000011111100111111000000000",
            'f': "00000000011111100111111001100000011111100111111001100000011000000110000000000000",
            'g': "00000000001111100111111001100000011011100110111001100110011111100011111000000000",
            'h': "00000000011001100110011001100110011111100111111001100110011001100110011000000000",
            'i': "00000000011111100111111000011000000110000001100000011000011111100111111000000000",
            'j': "00000000000001100000011000000110000001100110011001100110011111100011110000000000",
            'k': "00000000011001100110111001111100011110000111100001111100011011100110011000000000",
            'l': "00000000011000000110000001100000011000000110000001100000011111100111111000000000",
            'm': "00000000011001100111111001111110011111100110011001100110011001100110011000000000",
            'n': "00000000011001100111011001110110011111100110111001101110011001100110011000000000",
            'o': "00000000001111000111111001100110011001100110011001100110011111100011110000000000",
            'p': "00000000011111000111111001100110011111100111110001100000011000000110000000000000",
            'q': "00000000001111000111111001100110011001100110011001111110001111000000011000000000",
            'r': "00000000011111000111111001100110011111100111110001111000011011000110011000000000",
            's': "00000000001111100111111001110000011111000011111000001110011111100111110000000000",
            't': "00000000011111100111111000011000000110000001100000011000000110000001100000000000",
            'u': "00000000011001100110011001100110011001100110011001100110011111100011110000000000",
            'v': "00000000011001100110011001100110011001100011110000111100000110000001100000000000",
            'w': "00000000010110100101101001011010010110100101101001111110011111100111111000000000",
            'x': "00000000011001100110011000111100000110000001100000111100011001100110011000000000",
            'y': "00000000011001100110011000111100001111000001100000011000000110000001100000000000",
            'z': "00000000011111100111111000001110000111000011100001110000011111100111111000000000",
            ' ': "00000000000000000000000000000000000000000000000000000000000000000000000000000000"}

def safe_type(s):
    if s == '':
        return False
    for ch in s:
        if ch != ' ' and (ch < 'a' or ch > 'z'):
            return False
    return True

s = ''
while not safe_type(s):
    s = input("Type the string you want to transform into an image (a-z and spaces): ")
    s = s.lower()

name = input("Type the name of the file to create: ")
while name == '':
    name = input("Type the name of the file to create: ")

#scale = int(input("Default scale of the letters is 8x10. \
# Type the scale you want to use \
# (e.g., type '1' to use 8x10, '2' to use 16x20 etc.):"))
scale = 1

f = open(name + ".pbm", "w")

# PBM header
f.write("P1\n")
# Size of the file
height = 10 * scale
width = 8 * len(s) * scale
f.write(str(width) + " " + str(height) + "\n")

for i in range(height):
    tmp = ""
    for ch in s:
        for bit in letters[ch][i*8:(i+1)*8]:
            tmp += bit * scale * scale
    f.write(tmp + "\n")

f.close()
